Parameters:
  ModulesMock: |
    [{
        "ProcessID": 10112,
        "ModuleBaseAddress": 140730032128000,
        "ModuleBaseSize": 2191360,
        "ModuleName": "ntdll.dll",
        "ExePath": "C:\\Windows\\SYSTEM32\\ntdll.dll"
    }]
  PsListMock: |
    [{
        "Pid": "10112",
        "Ppid": "1676",
        "Name": "bad.exe",
        "Username": "NT AUTHORITY\\SYSTEM",
        "OwnerSid": "S-1-5-18",
        "CommandLine": "\"C:\\bad\\bad.exe\" /test -p \"C:\\bad\\bad.dit\"",
        "Exe": "C:\\bad\\bad.exe",
        "TokenIsElevated": "true",
        "CreateTime": "2024-02-17T04:26:13.6996281Z",
        "StartTime": "2024-02-17T04:26:13.6996281Z",
        "EndTime": "0001-01-01T00:00:00Z"
    }]
  ProcessTrackerGet: |
    [{
        "Id": "1676",
        "ParentId": "1740",
        "RealParentId": "",
        "UpdateType": "",
        "StartTime": "2024-02-22T09:25:59.2051994Z",
        "EndTime": "0001-01-01T00:00:00Z",
        "Data": {
          "Pid": 1676,
          "Ppid": 1740,
          "Name": "pwsh.exe",
          "Threads": 29,
          "Username": "NT AUTHORITY\\SYSTEM",
          "OwnerSid": "S-1-5-18",
          "CommandLine": "\"C:\\Program Files\\PowerShell\\7\\pwsh.exe\" -noexit -command \"try { . \\\"c:\\bad\\bad.ps1\\\" } catch {}\"",
          "Exe": "C:\\Program Files\\PowerShell\\7\\pwsh.exe",
          "TokenIsElevated": true,
          "CreateTime": "2024-02-22T09:25:59.2051994Z"
        }
    }]
  HashMock: |
    [{
        "MD5": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "SHA1": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "SHA256": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    }]
  Rules: |
    title: Golden Test - pslist
    logsource:
      category: image_load
      product: windows
      service: pslist
    detection:
      condition: selection_1 and selection_2 and selection_3 and selection_4 and selection_5 and selection_6 and selection_7 and selection_8 and selection_9 and selection_10 and selection_11 and selection_12 and selection_13 and selection_14 and selection_15 and selection_16 and selection_17 and selection_18
      selection_1:
        CommandLine|contains|all:
          - '.dit'
          - ' /test'
          - '-p'
      selection_2:
        CommandLine: "\"C:\\bad\\bad.exe\" /test -p \"C:\\bad\\bad.dit\"" 
      selection_3:
        GrandParentCommandLine: "\"C:\\Program Files\\PowerShell\\7\\pwsh.exe\" -noexit -command \"try { . \\\"c:\\bad\\bad.ps1\\\" } catch {}\""
      selection_4:
        GrandParentImage: "C:\\Program Files\\PowerShell\\7\\pwsh.exe"
      selection_5:
        Image: "C:\\bad\\bad.exe"
      selection_6:
        ModuleMD5: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      selection_7:
        ModuleName: "ntdll.dll"
      selection_8:
        ModulePath: "C:\\Windows\\SYSTEM32\\ntdll.dll"
      selection_9:
        ModuleSHA1: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      selection_10:
        ModuleSHA256: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      selection_11:
        ParentCommandLine: "\"C:\\Program Files\\PowerShell\\7\\pwsh.exe\" -noexit -command \"try { . \\\"c:\\bad\\bad.ps1\\\" } catch {}\""
      selection_12:
        ParentImage: "C:\\Program Files\\PowerShell\\7\\pwsh.exe"
      selection_13:
        ParentMD5: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      selection_14:
        ParentSHA1: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      selection_15:
        ParentSHA256: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      selection_16:
        ProcessMD5: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
      selection_17:
        ProcessSHA1: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" 
      selection_18:
        ProcessSHA256: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    status: test
    author: test
    level: high
    references:
      - https://github.com/Velocidex/velociraptor



Queries:
  - LET temp <= "C:\\tmp\\"
  - LET _ <= SELECT
        mock(plugin="modules", results=parse_json_array(data=ModulesMock)),
        mock(plugin="process_tracker_pslist", results=parse_json_array(data=PsListMock)),
        mock(function="process_tracker_get", results=parse_json_array(data=ProcessTrackerGet)),
        mock(function="hash", results=parse_json_array(data=HashMock))
      FROM scope()
  - SELECT * FROM Artifact.Sigma.Windows.Curated(ROOT=temp,
      SigmaRules=Rules, Debug=True,
      RuleStatus='All Rules', RuleLevel='All', RuleTitleFilter=".")
    ORDER BY Timestamp
